#include <iostream>
using namespace std;
#include <windows.h>
#include <stdio.h>
#include <GL/glut.h>
#include<math.h>
#include <mmsystem.h>
# define PI           3.14159265358979323846



float _move = 0.0f;
float _move1 = -90.0f;
float _move2 = 0.0f;
float _move3 = 0.0f;
float _move4 = 0.0f;
float _move5 = 0.0f;
float _move6 = 90.0f;
float _move7 = 90.0f;
float _move8 = -90.0f;
float rain = 0.0;


float _angle = 0.0f;
float _angle1 = 0.0f;
float _angle2 = 0.0f;


bool rainday = false;



	void circleSolid(float x, float y, float radius)
{

    int triangleAmount = 100; //# of triangles used to draw circle

    GLfloat twicePi = 2.0f * PI;

    glBegin(GL_TRIANGLE_FAN);
    glVertex2f(x, y); // center of circle
    for(int i = 0; i <= triangleAmount; i++)
    {
        glVertex2f(x + (radius * cos(i *  twicePi / triangleAmount)), y + (radius * sin(i * twicePi / triangleAmount)));
    }
    glEnd();
}

//sky//
void sky()
{

    glBegin(GL_QUADS);
    glColor3ub(130, 202, 255);
    glVertex2f(-90.64f,-30.00f);
    glVertex2f(90.64f,30.00f);
    glVertex2f(90.64f,150.64f);
    glVertex2f(-90.64f,150.64f);
    glEnd();
    //End of sky


}

void skyN()
{

    glBegin(GL_QUADS);
    glColor3ub(0, 0, 0);
    glVertex2f(-90.64f,85.00f);
    glVertex2f(90.64f,85.00f);
    glVertex2f(90.64f,150.64f);
    glVertex2f(-90.64f,150.64f);
    glEnd();
    //End of sky


       //Moon

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(60,140.0,8.5);

   glColor3f(0.0f, 0.0f, 0.0f);
   circleSolid(60,140.0,9.5);
   glEnd();


}
void star()
{

       //Moon
   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(30,140.0,8.0);

   glColor3f(0.0f, 0.0f, 0.0f);
   circleSolid(29.0f,142.0,6.7);
   glEnd();

    //Stars
   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(40,130.0,0.6);

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(20,130.0,0.6);

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(-20,130.0,0.6);

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(-40,130.0,0.6);

   glColor3f(1.0f, 1.0f, 0.6f);
   circleSolid(-70,150.0,0.6);

   glColor3f(1.0f, 1.0f, 0.6f);
   circleSolid(-16,140.0,.6);

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(-6,133.0,0.6);

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(-0,110.0,0.6);

   glColor3f(1.0f, 1.0f, .6f);
   circleSolid(10,116.0,0.6);





      glColor3f(0.6f, 1.0f, 1.0f);
   circleSolid(88,130.0,0.6);

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(80,150.0,0.6);

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(70,140.0,0.6);

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(65,129.0,0.6);

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(16,120.0,0.6);

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(22,117.0,0.6);





         glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(54,10.0,1.0);

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(-80,150.0,0.6);

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(67,144.0,0.6);

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(45,147.0,0.6);

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(-16,130.0,0.6);

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(-22,122.0,0.6);


      glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(-77,130.0,0.6);

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(-35,138.0,0.6);

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(-76,144.0,0.6);

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(-87,137.0,0.6);

         glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(-84,136.0,0.6);

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(-55,122.0,0.6);

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(-66,139.0,0.6);

   glColor3f(1.0f, 1.0f, 1.0f);
   circleSolid(-70,133.0,0.6);



    glEnd();


}

void sun()

{
///sun day

glPushMatrix();
    glTranslatef( 0.0f, 0.0f,0.0f);
    glRotatef(_angle, 0.0f, 0.0f,1.0f);
    glColor3ub( 253, 208, 23);
    circleSolid(60.0f,140.0f,8.0);

    glPopMatrix();
    glutSwapBuffers();

}


void clouds()
{
   glMatrixMode(GL_MODELVIEW);
   glPushMatrix();
/*Transalation*/
   glTranslatef(_move5, 90.0f, 0.0f);
/*Rotation*/
//glRotatef(90,0.0f, 0.0f, 1.0f);
/*Scaling*/
    glScalef(120.0f, 120.0f,1.0f);

    glColor3ub( 255, 255, 255);
    circleSolid(0.23f,0.43f,0.04);
    circleSolid(0.21f,0.42f,0.04);
    circleSolid(0.21f,0.40f,0.04);
    circleSolid(0.23f,0.41f,0.04);
    circleSolid(0.19f,0.43f,0.04);
    circleSolid(0.19f,0.40f,0.04);
    circleSolid(0.17f,0.42f,0.04);
    circleSolid(0.18f,0.41f,0.04);
    circleSolid(0.16f,0.41f,0.04);

    glColor3ub( 255, 255, 255);
    circleSolid(-0.43f,0.38f,0.04);
    circleSolid(-0.41f,0.37f,0.04);
    circleSolid(-0.41f,0.36f,0.04);
    circleSolid(-0.43f,0.37f,0.04);
    circleSolid(-0.39f,0.38f,0.04);
    circleSolid(-0.39f,0.36f,0.04);
    circleSolid(-0.37f,0.37f,0.04);
    circleSolid(-0.38f,0.36f,0.04);
    circleSolid(-0.36f,0.37f,0.04);

    glPopMatrix();

    glPushMatrix();
    glTranslatef(0,0.0f,0.00f);

    glColor3ub( 255, 255, 255);
    circleSolid(0.43f,0.38f,0.04);
    circleSolid(0.41f,0.37f,0.04);
    circleSolid(0.41f,0.36f,0.04);
    circleSolid(0.43f,0.37f,0.04);
    circleSolid(0.39f,0.38f,0.04);
    circleSolid(0.39f,0.36f,0.04);
    circleSolid(0.37f,0.37f,0.04);
    circleSolid(0.38f,0.36f,0.04);
    circleSolid(0.36f,0.37f,0.04);

    glColor3ub( 255, 255, 255);
    circleSolid(-0.13f,0.43f,0.04);
    circleSolid(-0.11f,0.42f,0.04);
    circleSolid(-0.11f,0.40f,0.04);
    circleSolid(-0.13f,0.41f,0.04);
    circleSolid(-0.09f,0.43f,0.04);
    circleSolid(-0.09f,0.40f,0.04);
    circleSolid(-0.07f,0.42f,0.04);
    circleSolid(-0.04f,0.41f,0.04);
    circleSolid(-0.06f,0.41f,0.04);
    glEnd();
    glPopMatrix();






}



///Cloud 2
void clouds1()
{
   glMatrixMode(GL_MODELVIEW);
   glPushMatrix();
/*Transalation*/
   glTranslatef(_move7, 80.0f, 0.0f);
/*Rotation*/
//glRotatef(90,0.0f, 0.0f, 1.0f);
/*Scaling*/
    glScalef(120.0f, 120.0f,1.0f);

    glColor3ub( 255, 255, 255);
    circleSolid(0.23f,0.43f,0.04);
    circleSolid(0.21f,0.42f,0.04);
    circleSolid(0.21f,0.40f,0.04);
    circleSolid(0.23f,0.41f,0.04);
    circleSolid(0.19f,0.43f,0.04);
    circleSolid(0.19f,0.40f,0.04);
    circleSolid(0.17f,0.42f,0.04);
    circleSolid(0.18f,0.41f,0.04);
    circleSolid(0.16f,0.41f,0.04);

    glColor3ub( 255, 255, 255);
    circleSolid(-0.43f,0.38f,0.04);
    circleSolid(-0.41f,0.37f,0.04);
    circleSolid(-0.41f,0.36f,0.04);
    circleSolid(-0.43f,0.37f,0.04);
    circleSolid(-0.39f,0.38f,0.04);
    circleSolid(-0.39f,0.36f,0.04);
    circleSolid(-0.37f,0.37f,0.04);
    circleSolid(-0.38f,0.36f,0.04);
    circleSolid(-0.36f,0.37f,0.04);

    glPopMatrix();

    glPushMatrix();
    glTranslatef(20,20.0f,0.00f);

    glColor3ub( 255, 255, 255);
    circleSolid(0.43f,0.38f,0.04);
    circleSolid(0.41f,0.37f,0.04);
    circleSolid(0.41f,0.36f,0.04);
    circleSolid(0.43f,0.37f,0.04);
    circleSolid(0.39f,0.38f,0.04);
    circleSolid(0.39f,0.36f,0.04);
    circleSolid(0.37f,0.37f,0.04);
    circleSolid(0.38f,0.36f,0.04);
    circleSolid(0.36f,0.37f,0.04);

    glColor3ub( 255, 255, 255);
    circleSolid(-0.13f,0.43f,0.04);
    circleSolid(-0.11f,0.42f,0.04);
    circleSolid(-0.11f,0.40f,0.04);
    circleSolid(-0.13f,0.41f,0.04);
    circleSolid(-0.09f,0.43f,0.04);
    circleSolid(-0.09f,0.40f,0.04);
    circleSolid(-0.07f,0.42f,0.04);
    circleSolid(-0.04f,0.41f,0.04);
    circleSolid(-0.06f,0.41f,0.04);
    glEnd();
    glPopMatrix();






}



void cloudsR()
{
   glMatrixMode(GL_MODELVIEW);
   glPushMatrix();
/*Transalation*/
   glTranslatef(_move6, 100.0f, 0.0f);
/*Rotation*/
//glRotatef(90,0.0f, 0.0f, 1.0f);
/*Scaling*/
    glScalef(120.0f, 80.0f,1.0f);

    glColor3ub(96, 96, 96);
    circleSolid(0.23f,0.43f,0.04);
    circleSolid(0.21f,0.42f,0.04);
    circleSolid(0.21f,0.40f,0.04);
    circleSolid(0.23f,0.41f,0.04);
    circleSolid(0.19f,0.43f,0.04);
    circleSolid(0.19f,0.40f,0.04);
    circleSolid(0.17f,0.42f,0.04);
    circleSolid(0.18f,0.41f,0.04);
    circleSolid(0.16f,0.41f,0.04);

    glColor3ub( 96, 96, 96);
    circleSolid(-0.43f,0.38f,0.04);
    circleSolid(-0.41f,0.37f,0.04);
    circleSolid(-0.41f,0.36f,0.04);
    circleSolid(-0.43f,0.37f,0.04);
    circleSolid(-0.39f,0.38f,0.04);
    circleSolid(-0.39f,0.36f,0.04);
    circleSolid(-0.37f,0.37f,0.04);
    circleSolid(-0.38f,0.36f,0.04);
    circleSolid(-0.36f,0.37f,0.04);

    glPopMatrix();

    glPushMatrix();
    glTranslatef(0,0.0f,0.00f);

    glColor3ub( 55, 49, 49);
    circleSolid(0.43f,0.38f,0.04);
    circleSolid(0.41f,0.37f,0.04);
    circleSolid(0.41f,0.36f,0.04);
    circleSolid(0.43f,0.37f,0.04);
    circleSolid(0.39f,0.38f,0.04);
    circleSolid(0.39f,0.36f,0.04);
    circleSolid(0.37f,0.37f,0.04);
    circleSolid(0.38f,0.36f,0.04);
    circleSolid(0.36f,0.37f,0.04);

    glColor3ub( 55, 49, 49);
    circleSolid(-0.13f,0.43f,0.04);
    circleSolid(-0.11f,0.42f,0.04);
    circleSolid(-0.11f,0.40f,0.04);
    circleSolid(-0.13f,0.41f,0.04);
    circleSolid(-0.09f,0.43f,0.04);
    circleSolid(-0.09f,0.40f,0.04);
    circleSolid(-0.07f,0.42f,0.04);
    circleSolid(-0.04f,0.41f,0.04);
    circleSolid(-0.06f,0.41f,0.04);
    glEnd();
    glPopMatrix();






}


void cellphonetower()
{

glMatrixMode(GL_MODELVIEW);
glPushMatrix();

//glTranslatef(20.0f, 0.0f, 0.0f);

/*Scaling*/
//glScalef(150.0f, 185.0f,1.0f);

    /*starting cellphn tower */

    glColor3ub(0, 2, 0);
    glLineWidth(5);

	glBegin(GL_LINES);
    glVertex2f(-20.0f, 83.0f);    // x, y
	glVertex2f(-16.0f, 145.0f);
    glVertex2f(-10.0f, 83.0f);    // x, y
	glVertex2f(-14.0f, 145.0f);
    glVertex2f(-15.0f, 83.0f);    // x, y
	glVertex2f(-15.0f, 145.0f);
    glVertex2f(-13.0f, 143.0f);    //step1
	glVertex2f(-17.0f, 143.0f);
    glVertex2f(-13.0f, 139.0f);    // step2
	glVertex2f(-17.0f, 139.0f);
    glVertex2f(-12.5f, 135.0f);    // x, y
	glVertex2f(-17.5f, 135.0f);
    glVertex2f(-12.0f, 131.0f);    // x, y
	glVertex2f(-18.0f, 131.0f);
    glVertex2f(-12.0f, 127.0f);    // x, y
	glVertex2f(-18.0f, 127.0f);
    glVertex2f(-12.0f, 122.0f);    // x, y
	glVertex2f(-18.0f, 122.0f);
    glVertex2f(-12.0f, 116.0f);    // x, y
	glVertex2f(-18.0f, 116.0f);
    glVertex2f(-12.0f, 110.0f);    // x, y
	glVertex2f(-18.0f, 110.0f);
    glVertex2f(-11.0f, 105.0f);    // x, y
	glVertex2f(-19.0f, 105.0f);
    glVertex2f(-10.5f, 100.0f);    // x, y
	glVertex2f(-19.5f, 100.0f);
    glVertex2f(-10.0f, 94.0f);    // x, y
	glVertex2f(-20.0f, 94.0f);
	glEnd();

	   glColor3ub(241, 193, 66);
    circleSolid(-13.0f,143.0f, 2.0);
    circleSolid(-15.0f,138.0f, 2.0);




   glEnd();


                     //House stand
    glBegin(GL_QUADS);
    glColor3ub(0, 0, 0);
    glVertex2f(-22.5f,83.0f);
    glVertex2f(-8.5f,83.0f);
    glVertex2f(-8.5f,86.9f);
    glVertex2f(-22.5f,86.9f);

    glEnd();



    glPopMatrix();


    /*End of  cellphn tower*/
}


void cellphonetowerN()
{

glMatrixMode(GL_MODELVIEW);
glPushMatrix();

//glTranslatef(20.0f, 0.0f, 0.0f);

/*Scaling*/
//glScalef(150.0f, 185.0f,1.0f);

    /*starting cellphn tower */

    glColor3ub(229, 228, 226);
    glLineWidth(5);

	glBegin(GL_LINES);
    glVertex2f(-20.0f, 83.0f);    // x, y
	glVertex2f(-16.0f, 145.0f);
    glVertex2f(-10.0f, 83.0f);    // x, y
	glVertex2f(-14.0f, 145.0f);
    glVertex2f(-15.0f, 83.0f);    // x, y
	glVertex2f(-15.0f, 145.0f);
    glVertex2f(-13.0f, 143.0f);    //step1
	glVertex2f(-17.0f, 143.0f);
    glVertex2f(-13.0f, 139.0f);    // step2
	glVertex2f(-17.0f, 139.0f);
    glVertex2f(-12.5f, 135.0f);    // x, y
	glVertex2f(-17.5f, 135.0f);
    glVertex2f(-12.0f, 131.0f);    // x, y
	glVertex2f(-18.0f, 131.0f);
    glVertex2f(-12.0f, 127.0f);    // x, y
	glVertex2f(-18.0f, 127.0f);
    glVertex2f(-12.0f, 122.0f);    // x, y
	glVertex2f(-18.0f, 122.0f);
    glVertex2f(-12.0f, 116.0f);    // x, y
	glVertex2f(-18.0f, 116.0f);
    glVertex2f(-12.0f, 110.0f);    // x, y
	glVertex2f(-18.0f, 110.0f);
    glVertex2f(-11.0f, 105.0f);    // x, y
	glVertex2f(-19.0f, 105.0f);
    glVertex2f(-10.5f, 100.0f);    // x, y
	glVertex2f(-19.5f, 100.0f);
    glVertex2f(-10.0f, 94.0f);    // x, y
	glVertex2f(-20.0f, 94.0f);
	glEnd();

	   glColor3ub(241, 193, 66);
    circleSolid(-13.0f,143.0f, 2.0);
    circleSolid(-15.0f,138.0f, 2.0);




   glEnd();


                     // stand
    glBegin(GL_QUADS);
    glColor3ub(100, 63, 44);
    glVertex2f(-22.5f,83.0f);
    glVertex2f(-8.5f,83.0f);
    glVertex2f(-8.5f,86.9f);
    glVertex2f(-22.5f,86.9f);

    glEnd();



    glPopMatrix();


    /*End of  cellphn tower*/
}


//ground//
void ground()
{

    glBegin(GL_QUADS);
    glColor3ub(161, 161, 161);
    glVertex2f(-90.64f,60.00f);
    glVertex2f(90.64f,60.00f);
    glVertex2f(90.64f,85.64f);
    glVertex2f(-90.64f,85.64f);
    glEnd();
    //End of ground
}
void railing()

{
//glLoadIdentity();
glMatrixMode(GL_MODELVIEW);
glPushMatrix();
/*Transalation*/
glTranslatef(50.0f, 30.0f, 0.0f);
/*Rotation*/
//glRotatef(90,0.0f, 0.0f, 1.0f);
/*Scaling*/
glScalef(80.0f, 78.0f,1.0f);
//glTranslatef(10.0f, 10.0f, 0.0f)
{
for(float j=-90.0f; j<=90.0f; j+=0.05f)
{
glLineWidth(6.0);
glBegin(GL_LINES);
glColor3f(0.5f,0.0f,0.0f);

glVertex2f(j,-0.04);
glVertex2f(j,-0.18);
glEnd();
}
glBegin(GL_LINES);

glColor3ub(60.0f,25.0f,10.0f);

glVertex2f(-90.0,-0.08);
glVertex2f(90.0,-0.08);
glEnd();
glBegin(GL_LINES);
glColor3ub(60.0f,25.0f,10.0f);
glVertex2f(-90.0,-0.16);
glVertex2f(90.0,-0.16);
glEnd();
glPopMatrix();
}

}

void tree()
{

glMatrixMode(GL_MODELVIEW);
glPushMatrix();

glTranslatef(7.0f, 60.0f, 0.0f);

/*Scaling*/
glScalef(150.0f, 180.0f,1.0f);

    /*starting Tree */

    glBegin(GL_QUADS);
    glColor3ub(92, 92, 61);
    glVertex2f(-0.05f,-0.01f);
    glVertex2f(-0.03f,-0.01f);
    glVertex2f(-0.03f,0.24f);
    glVertex2f(-0.05f,0.24f);
    glEnd();


    glLineWidth(8);
    glBegin(GL_LINES);        //left
    glColor3ub(92, 92, 61);
    glVertex2f(-0.04f, 0.23f);
    glVertex2f(-0.09f, 0.27f);

    glVertex2f(-0.04f, 0.23f);    //right
    glVertex2f(0.01f, 0.27f);

    glVertex2f(-0.04f, 0.24f);     //middle
    glVertex2f(-0.04f, 0.32f);
    glEnd();

    glColor3ub(0, 102, 0);
    circleSolid(-0.10f, 0.28f, 0.03);  //1
    glColor3ub(0, 204, 0);
    circleSolid(-0.11f, 0.31f, 0.03);         //2
    glColor3ub(0, 153, 51);
    circleSolid(-0.09f, 0.33f, 0.03);         //3

    glColor3ub( 0, 153, 0);

    circleSolid(-0.04f, 0.33f, 0.03);      //4

    circleSolid(0.0f, 0.33f, 0.03);     //5
    glColor3ub( 0, 153, 0);
    circleSolid(0.02f, 0.31f, 0.03);        //6

    glColor3ub( 0, 77, 0 );
    circleSolid(0.03f, 0.28f, 0.03);      //7

     glEnd();
    glPopMatrix();


    /*End of  Tree */
}

void house()
{

glMatrixMode(GL_MODELVIEW);
glPushMatrix();

//glTranslatef(0.0f, 60.0f, 0.0f);

/*Scaling*/
//glScalef(150.0f, 185.0f,1.0f);

    /*starting house */

    glBegin(GL_QUADS);
    glColor3ub(248, 167, 5);
    glVertex2f(-88.0f,85.0f);
    glVertex2f(-75.0f,85.0f);
    glVertex2f(-75.0f,125.0f);
    glVertex2f(-88.0f,125.0f);
    glEnd();
     //door
    glBegin(GL_QUADS);
    glColor3ub(25, 248, 5);
    glVertex2f(-84.0f,85.0f);
    glVertex2f(-80.0f,85.0f);
    glVertex2f(-80.0f,95.0f);
    glVertex2f(-84.0f,95.0f);
    glEnd();

         //window 1
    glBegin(GL_QUADS);
    glColor3ub(91, 133, 87);
    glVertex2f(-86.0f,99.0f);
    glVertex2f(-84.0f,99.0f);
    glVertex2f(-84.0f,105.0f);
    glVertex2f(-86.0f,105.0f);
    glEnd();
             //window2
    glBegin(GL_QUADS);
    glColor3ub(91, 133, 87);
    glVertex2f(-86.0f+6,99.0f);
    glVertex2f(-84.0f+6,99.0f);
    glVertex2f(-84.0f+6,105.0f);
    glVertex2f(-86.0f+6,105.0f);
    glEnd();


             //window 3
    glBegin(GL_QUADS);
    glColor3ub(91, 133, 87);
    glVertex2f(-86.0f,99.0f+8);
    glVertex2f(-84.0f,99.0f+8);
    glVertex2f(-84.0f,105.0f+8);
    glVertex2f(-86.0f,105.0f+8);
    glEnd();

                 //window4
    glBegin(GL_QUADS);
    glColor3ub(91, 133, 87);
    glVertex2f(-86.0f+6,99.0f+8);
    glVertex2f(-84.0f+6,99.0f+8);
    glVertex2f(-84.0f+6,105.0f+8);
    glVertex2f(-86.0f+6,105.0f+8);
    glEnd();

             //window 5
    glBegin(GL_QUADS);
    glColor3ub(200, 92, 221);
    glVertex2f(-86.0f+6,99.0f+16);
    glVertex2f(-84.0f+6,99.0f+16);
    glVertex2f(-84.0f+6,105.0f+16);
    glVertex2f(-86.0f+6,105.0f+16);
    glEnd();

                 //window 6
    glBegin(GL_QUADS);
    glColor3ub(200, 92, 221);
    glVertex2f(-86.0f,99.0f+16);
    glVertex2f(-84.0f,99.0f+16);
    glVertex2f(-84.0f,105.0f+16);
    glVertex2f(-86.0f,105.0f+16);
    glEnd();

                     //House stand
    glBegin(GL_QUADS);
    glColor3ub(89, 67, 21);
    glVertex2f(-89.5f,83.0f);
    glVertex2f(-73.5f,83.0f);
    glVertex2f(-73.5f,86.9f);
    glVertex2f(-89.5f,86.9f);
    glEnd();



    glPopMatrix();


    /*End of  house */
}



void house2()
{

glMatrixMode(GL_MODELVIEW);
glPushMatrix();

glTranslatef(20.0f, 0.0f, 0.0f);

/*Scaling*/
//glScalef(150.0f, 185.0f,1.0f);

    /*starting house */

    glBegin(GL_QUADS);
    glColor3ub(5, 74, 248);
    glVertex2f(-88.0f,85.0f);
    glVertex2f(-75.0f,85.0f);
    glVertex2f(-75.0f,125.0f);
    glVertex2f(-88.0f,125.0f);
    glEnd();
     //door
    glBegin(GL_QUADS);
    glColor3ub(179, 248, 5);
    glVertex2f(-84.0f,85.0f);
    glVertex2f(-80.0f,85.0f);
    glVertex2f(-80.0f,95.0f);
    glVertex2f(-84.0f,95.0f);
    glEnd();

         //window 1
    glBegin(GL_QUADS);
    glColor3ub(200, 92, 221);
    glVertex2f(-86.0f,99.0f);
    glVertex2f(-84.0f,99.0f);
    glVertex2f(-84.0f,105.0f);
    glVertex2f(-86.0f,105.0f);
    glEnd();
             //window2
    glBegin(GL_QUADS);
    glColor3ub(200, 92, 221);
    glVertex2f(-86.0f+6,99.0f);
    glVertex2f(-84.0f+6,99.0f);
    glVertex2f(-84.0f+6,105.0f);
    glVertex2f(-86.0f+6,105.0f);
    glEnd();


             //window 3
    glBegin(GL_QUADS);
    glColor3ub(179, 248, 5);
    glVertex2f(-86.0f,99.0f+8);
    glVertex2f(-84.0f,99.0f+8);
    glVertex2f(-84.0f,105.0f+8);
    glVertex2f(-86.0f,105.0f+8);
    glEnd();

                 //window4
    glBegin(GL_QUADS);
    glColor3ub(179, 248, 5);
    glVertex2f(-86.0f+6,99.0f+8);
    glVertex2f(-84.0f+6,99.0f+8);
    glVertex2f(-84.0f+6,105.0f+8);
    glVertex2f(-86.0f+6,105.0f+8);
    glEnd();

             //window 5
    glBegin(GL_QUADS);
    glColor3ub(200, 92, 221);
    glVertex2f(-86.0f+6,99.0f+16);
    glVertex2f(-84.0f+6,99.0f+16);
    glVertex2f(-84.0f+6,105.0f+16);
    glVertex2f(-86.0f+6,105.0f+16);
    glEnd();

                 //window 6
    glBegin(GL_QUADS);
    glColor3ub(200, 92, 221);
    glVertex2f(-86.0f,99.0f+16);
    glVertex2f(-84.0f,99.0f+16);
    glVertex2f(-84.0f,105.0f+16);
    glVertex2f(-86.0f,105.0f+16);
    glEnd();

                     //House stand
    glBegin(GL_QUADS);
    glColor3ub(89, 67, 21);
    glVertex2f(-89.5f,83.0f);
    glVertex2f(-73.5f,83.0f);
    glVertex2f(-73.5f,86.9f);
    glVertex2f(-89.5f,86.9f);
    glEnd();



    glPopMatrix();


    /*End of  house */
}



void house3()
{

glMatrixMode(GL_MODELVIEW);
glPushMatrix();

glTranslatef(120.0f, 0.0f, 0.0f);

/*Scaling*/
glScalef(1.2f, 1.0f,1.0f);

    /*starting house */

    glBegin(GL_QUADS);
    glColor3ub(92, 92, 61);
    glVertex2f(-88.0f,85.0f);
    glVertex2f(-75.0f,85.0f);
    glVertex2f(-75.0f,125.0f);
    glVertex2f(-88.0f,125.0f);
    glEnd();
     //door
    glBegin(GL_QUADS);
    glColor3ub(200, 92, 221);
    glVertex2f(-84.0f,85.0f);
    glVertex2f(-80.0f,85.0f);
    glVertex2f(-80.0f,95.0f);
    glVertex2f(-84.0f,95.0f);
    glEnd();

         //window 1
    glBegin(GL_QUADS);
    glColor3ub(179, 248, 5);
    glVertex2f(-86.0f,99.0f);
    glVertex2f(-84.0f,99.0f);
    glVertex2f(-84.0f,105.0f);
    glVertex2f(-86.0f,105.0f);
    glEnd();
             //window2
    glBegin(GL_QUADS);
    glColor3ub(179, 248, 5);
    glVertex2f(-86.0f+6,99.0f);
    glVertex2f(-84.0f+6,99.0f);
    glVertex2f(-84.0f+6,105.0f);
    glVertex2f(-86.0f+6,105.0f);
    glEnd();


             //window 3
    glBegin(GL_QUADS);
    glColor3ub(200, 92, 221);
    glVertex2f(-86.0f,99.0f+8);
    glVertex2f(-84.0f,99.0f+8);
    glVertex2f(-84.0f,105.0f+8);
    glVertex2f(-86.0f,105.0f+8);
    glEnd();

                 //window4
    glBegin(GL_QUADS);
    glColor3ub(200, 92, 221);
    glVertex2f(-86.0f+6,99.0f+8);
    glVertex2f(-84.0f+6,99.0f+8);
    glVertex2f(-84.0f+6,105.0f+8);
    glVertex2f(-86.0f+6,105.0f+8);
    glEnd();

             //window 5
    glBegin(GL_QUADS);
    glColor3ub(179, 248, 5);
    glVertex2f(-86.0f+6,99.0f+16);
    glVertex2f(-84.0f+6,99.0f+16);
    glVertex2f(-84.0f+6,105.0f+16);
    glVertex2f(-86.0f+6,105.0f+16);
    glEnd();

                 //window 6
    glBegin(GL_QUADS);
    glColor3ub(179, 248, 5);
    glVertex2f(-86.0f,99.0f+16);
    glVertex2f(-84.0f,99.0f+16);
    glVertex2f(-84.0f,105.0f+16);
    glVertex2f(-86.0f,105.0f+16);
    glEnd();

                     //House stand
    glBegin(GL_QUADS);
    glColor3ub(83, 52, 35);
    glVertex2f(-89.5f,83.0f);
    glVertex2f(-73.5f,83.0f);
    glVertex2f(-73.5f,86.9f);
    glVertex2f(-89.5f,86.9f);
    glEnd();



    glPopMatrix();


    /*End of  house */
}





void school()
{

glMatrixMode(GL_MODELVIEW);
glPushMatrix();

glTranslatef(60.0f, 0.0f, 0.0f);

/*Scaling*/
glScalef(1.2f, 1.0f,1.0f);

    /*starting house */




    glBegin(GL_QUADS);
    glColor3ub(222, 49, 99);
    glVertex2f(-88.0f,85.0f);
    glVertex2f(-73.0f,85.0f);
    glVertex2f(-73.0f,115.0f);

    glVertex2f(-88.0f,115.0f);
    glEnd();
     //door
    glBegin(GL_QUADS);
    glColor3ub(50, 43, 65);
    glVertex2f(-84.0f,85.0f);
    glVertex2f(-77.0f,85.0f);
    glVertex2f(-77.0f,93.0f);
    glVertex2f(-84.0f,93.0f);
    glEnd();

         //window 1
    glBegin(GL_QUADS);
    glColor3ub(44, 35, 211);
    glVertex2f(-86.0f,96.0f);
    glVertex2f(-84.0f,96.0f);
    glVertex2f(-84.0f,100.0f);
    glVertex2f(-86.0f,100.0f);
    glEnd();
             //window2
    glBegin(GL_QUADS);
    glColor3ub(44, 35, 211);
    glVertex2f(-86.0f+3,96.0f);
    glVertex2f(-84.0f+3,96.0f);
    glVertex2f(-84.0f+3,100.0f);
    glVertex2f(-86.0f+3,100.0f);
    glEnd();


        glBegin(GL_QUADS);
    glColor3ub(44, 35, 211);
    glVertex2f(-86.0f+6,96.0f);
    glVertex2f(-84.0f+6,96.0f);
    glVertex2f(-84.0f+6,100.0f);
    glVertex2f(-86.0f+6,100.0f);
    glEnd();

            glBegin(GL_QUADS);
    glColor3ub(44, 35, 211);
    glVertex2f(-86.0f+9,96.0f);
    glVertex2f(-84.0f+9,96.0f);
    glVertex2f(-84.0f+9,100.0f);
    glVertex2f(-86.0f+9,100.0f);
    glEnd();


             //window 3
    glBegin(GL_QUADS);
    glColor3ub(218, 247, 166);
    glVertex2f(-86.0f,94.0f+8);
    glVertex2f(-84.0f,94.0f+8);
    glVertex2f(-84.0f,98.0f+8);
    glVertex2f(-86.0f,98.0f+8);
    glEnd();

        glBegin(GL_QUADS);
    glColor3ub(218, 247, 166);
    glVertex2f(-86.0f+3,94.0f+8);
    glVertex2f(-84.0f+3,94.0f+8);
    glVertex2f(-84.0f+3,98.0f+8);
    glVertex2f(-86.0f+3,98.0f+8);
    glEnd();

                 //window4
    glBegin(GL_QUADS);
    glColor3ub(218, 247, 166);
    glVertex2f(-86.0f+6,94.0f+8);
    glVertex2f(-84.0f+6,94.0f+8);
    glVertex2f(-84.0f+6,98.0f+8);
    glVertex2f(-86.0f+6,98.0f+8);
    glEnd();

        glBegin(GL_QUADS);
    glColor3ub(218, 247, 166);
    glVertex2f(-86.0f+9,94.0f+8);
    glVertex2f(-84.0f+9,94.0f+8);
    glVertex2f(-84.0f+9,98.0f+8);
    glVertex2f(-86.0f+9,98.0f+8);
    glEnd();

             //window 5
    glBegin(GL_QUADS);
    glColor3ub(179, 248, 5);
    glVertex2f(-86.0f+6,92.0f+16);
    glVertex2f(-84.0f+6,92.0f+16);
    glVertex2f(-84.0f+6,96.0f+16);
    glVertex2f(-86.0f+6,96.0f+16);
    glEnd();


    glBegin(GL_QUADS);
    glColor3ub(179, 248, 5);
    glVertex2f(-86.0f+3,92.0f+16);
    glVertex2f(-84.0f+3,92.0f+16);
    glVertex2f(-84.0f+3,96.0f+16);
    glVertex2f(-86.0f+3,96.0f+16);
    glEnd();

        glBegin(GL_QUADS);
    glColor3ub(179, 248, 5);
    glVertex2f(-86.0f,92.0f+16);
    glVertex2f(-84.0f,92.0f+16);
    glVertex2f(-84.0f,96.0f+16);
    glVertex2f(-86.0f,96.0f+16);
    glEnd();

        glBegin(GL_QUADS);
    glColor3ub(179, 248, 5);
    glVertex2f(-86.0f+9,92.0f+16);
    glVertex2f(-84.0f+9,92.0f+16);
    glVertex2f(-84.0f+9,96.0f+16);
    glVertex2f(-86.0f+9,96.0f+16);
    glEnd();




                     //House stand
    glBegin(GL_QUADS);
    glColor3ub(83, 52, 35);
    glVertex2f(-89.5f,83.0f);
    glVertex2f(-68.5f,83.0f);
    glVertex2f(-68.5f,86.9f);
    glVertex2f(-89.5f,86.9f);
    glEnd();

    glLineWidth(5);

	glBegin(GL_LINES);
	glColor3ub(92, 92, 61);
    glVertex2f(-89.0f, 115.2f);    // x, y
	glVertex2f(-71.0f, 115.2f);
	glEnd();




    glPopMatrix();


    /*End of  school */
}











//flag

void flag()
{

glMatrixMode(GL_MODELVIEW);
glPushMatrix();

glTranslatef(60.0f, 0.0f, 0.0f);

/*Scaling*/
glScalef(1.2f, 1.0f,1.0f);

    /*starting flag */



    glLineWidth(8);

	glBegin(GL_LINES);
	glColor3ub(92, 92, 61);
    glVertex2f(-71.0f, 85.2f);    // x, y
	glVertex2f(-71.0f, 110.2f);
	glEnd();

	    glLineWidth(26);

	glBegin(GL_LINES);
	glColor3ub(0, 159, 94);
    glVertex2f(-71.0f, 107.0f);    // x, y
	glVertex2f(-66.0f, 107.0f);
	glEnd();

	glColor3ub(249,0,0);
    circleSolid(-68.5f,107.0f, 1.5);



    glPopMatrix();


    /*End of  flag */
}







void windmill()
{

glMatrixMode(GL_MODELVIEW);
glPushMatrix();

//glTranslatef(60.0f, 0.0f, 0.0f);

/*Scaling*/
//glScalef(1.2f, 1.0f,1.0f);

    /*starting windmill */



    glLineWidth(10);

	glBegin(GL_LINES);
	glColor3ub(92, 92, 61);
    glVertex2f(70.5f, 85.2f);    // x, y
	glVertex2f(72.0f, 130.2f);

    glVertex2f(73.5f, 85.2f);    // x, y
	glVertex2f(72.0f, 130.2f);

	glEnd();




    glPopMatrix();


    /*End of  windmill */
}
//start of winfan1
void winwheel()
{

glMatrixMode(GL_MODELVIEW);
glPushMatrix();

glTranslatef(72.0f, 130.0f, 0.0f);


glRotatef(_angle1, 0.0f, 0.0f,1.0f);


glTranslatef(-72.0f, -130.0f, 0.0f);
/*Scaling*/
//glScalef(1.2f, 1.0f,1.0f);

    /*starting windmill */



	    glLineWidth(25);

	glBegin(GL_LINES);
	glColor3ub(0, 159, 94);
    glVertex2f(72.0f, 130.0f);    // x, y
	glVertex2f(72.0f, 115.0f);

    glVertex2f(72.0f, 130.0f);    // x, y
	glVertex2f(72.0f, 145.0f);

    glVertex2f(72.0f, 130.0f);    // x, y
	glVertex2f(57.0f, 130.0f);

    glVertex2f(72.0f, 130.0f);    // x, y
	glVertex2f(87.0f, 130.0f);
	glEnd();

	glColor3ub(85, 57, 57);
    circleSolid(72.0f,130.0f, 2.4);



    glPopMatrix();


    /*End of  windwheel */
}


void windmill2()
{

glMatrixMode(GL_MODELVIEW);
glPushMatrix();

glTranslatef(-11.5f, 0.0f, 0.0f);

/*Scaling*/
//glScalef(1.2f, 1.0f,1.0f);

    /*starting windmill */



    glLineWidth(10);

	glBegin(GL_LINES);
	glColor3ub(92, 92, 61);
    glVertex2f(64.5f, 85.2f);    // x, y
	glVertex2f(66.0f, 130.2f);

    glVertex2f(68.5f, 85.2f);    // x, y
	glVertex2f(66.0f, 130.2f);

	glEnd();




    glPopMatrix();


    /*End of  windmill */
}



void winwheel2()
{

glMatrixMode(GL_MODELVIEW);
glPushMatrix();

glTranslatef(54.5f, 130.0f, 0.0f);


glRotatef(_angle2, 0.0f, 0.0f,1.0f);

glTranslatef(-54.5f, -130.0f, 0.0f);
/*Scaling*/
//glScalef(1.2f, 1.0f,1.0f);

    /*starting windmill */



	    glLineWidth(25);

	glBegin(GL_LINES);
	glColor3ub(0, 159, 94);
    glVertex2f(72.0f-16.5, 130.0f);    // x, y
	glVertex2f(72.0f-16.5, 115.0f);

    glVertex2f(72.0f-16.5, 130.0f);    // x, y
	glVertex2f(72.0f-16.5, 145.0f);

    glVertex2f(72.0f-16.5, 130.0f);    // x, y
	glVertex2f(57.0f-16.5, 130.0f);

    glVertex2f(72.0f-16.5, 130.0f);    // x, y
	glVertex2f(87.0f-16.5, 130.0f);
	glEnd();

	glColor3ub(85, 57, 57);
    circleSolid(72.0f-16.5,130.0f, 2.4);



    glPopMatrix();


    /*End of  windwheel */
}

//void winwheel2()
//{
//
//glMatrixMode(GL_MODELVIEW);
//glPushMatrix();
//
////glTranslatef(10.0f, 0.0f, 0.0f);
//
//glRotatef(_angle2, 0.0f, 0.0f,1.0f);
//
//
////glTranslatef(-10.0f, -0.0f, 0.0f);
///*Scaling*/
////glScalef(1.2f, 1.0f,1.0f);
//
//    /*starting windmill */
//
//
//
//	    glLineWidth(25);
//
//	glBegin(GL_LINES);
//	glColor3ub(0, 159, 94);
//    glVertex2f(72.0f, 130.0f);    // x, y
//	glVertex2f(72.0f, 115.0f);
//
//    glVertex2f(72.0f, 130.0f);    // x, y
//	glVertex2f(72.0f, 145.0f);
//
//    glVertex2f(72.0f, 130.0f);    // x, y
//	glVertex2f(57.0f, 130.0f);
//
//    glVertex2f(72.0f, 130.0f);    // x, y
//	glVertex2f(87.0f, 130.0f);
//	glEnd();
//
//	glColor3ub(249,0,0);
//    circleSolid(72.0f,130.0f, 2.5);
//
//
//
//    glPopMatrix();
//
//
//    /*End of  windmill */
//}

















	void traflight(){
	    glMatrixMode(GL_MODELVIEW);
glPushMatrix();
/*Transalation*/
glTranslatef(0.0f, 40.0f, 0.0f);

//	glBegin(GL_POLYGON);            // These vertices form a closed polygon
	glColor3ub(83, 52, 35);  // Yellow

    glLineWidth(15);

	glBegin(GL_LINES);
    glVertex2f(-2.0f, 27.5f);    // x, y
	glVertex2f(-2.0f, 65.5f);
	glEnd();


     glColor3ub(55, 59, 58);

    glLineWidth(25);

	glBegin(GL_LINES);
    glVertex2f(2.0f, 65.5f);    // x, y
	glVertex2f(-10.0f, 65.5f);
	glEnd();

	glPointSize(15.0);
	// Draw a Red 1x1 Square centered at origin
	glBegin(GL_POINTS);              // Each set of 4 vertices form a quad
	glColor3f(1.0f, 0.0f, 0.0f); // Red
	glVertex2f(-8.0f, 65.5f);    // x, y

		glColor3ub(252, 240, 0 ); // Red
	glVertex2f(-5.0f, 65.5f);
			glColor3ub(0, 251, 71 ); // Red
	glVertex2f(-2.0f, 65.5f);

	glEnd();
	glPopMatrix();



	} //End of trafficlight

		void lambpost(){
glMatrixMode(GL_MODELVIEW);
glPushMatrix();
/*Transalation*/
glTranslatef(50.0f, 0.0f, 0.0f);

//	glBegin(GL_POLYGON);            // These vertices form a closed polygon
	glColor3ub(0, 1, 0);  // Yellow

    glLineWidth(15);

	glBegin(GL_LINES);
    glVertex2f(-2.0f, 20.0f);    // x, y
	glVertex2f(-2.0f, 70.0f);
	glEnd();


     glColor3ub(55, 59, 58);

    glLineWidth(11);

	glBegin(GL_LINES);
    glVertex2f(2.0f, 62.5f);    // x, y
	glVertex2f(-10.0f, 67.5f);
	glEnd();
	   glColor3ub(244, 233, 6 );
    circleSolid(-8.5f,64.0f, 2.03);   //2


    glPopMatrix();



	} //End of lambpost

		void lambpost1(){
glMatrixMode(GL_MODELVIEW);
glPushMatrix();
/*Transalation*/
glTranslatef(-70.0f, 0.0f, 0.0f);

//	glBegin(GL_POLYGON);            // These vertices form a closed polygon
	glColor3ub(0, 1, 0);  // Yellow

    glLineWidth(15);

	glBegin(GL_LINES);
    glVertex2f(-2.0f, 20.0f);    // x, y
	glVertex2f(-2.0f, 70.0f);
	glEnd();


     glColor3ub(55, 59, 58);

    glLineWidth(11);

	glBegin(GL_LINES);
    glVertex2f(2.0f, 62.5f);    // x, y
	glVertex2f(-10.0f, 67.5f);
	glEnd();
	   glColor3ub(244, 233, 6 );
    circleSolid(-8.5f,64.0f, 2.03);   //2


    glPopMatrix();



	} //End of lambpost


  void epoll(){
  glMatrixMode(GL_MODELVIEW);
  glPushMatrix();
/*Transalation*/
glTranslatef(-20.0f, 0.0f, 0.0f);

 // Yellow
     glColor3ub(91, 133, 87);
    glLineWidth(15);

	glBegin(GL_LINES);
    glVertex2f(-30.0f, 62.5f);    // x, y
	glVertex2f(-30.0f, 120.5f);
	glEnd();


    glColor3ub(55, 59, 58);
//
    glLineWidth(11);

	glBegin(GL_LINES);
    glVertex2f(-24.0f, 118.0f);    // x, y
	glVertex2f(-34.0f, 120.0f);

	glEnd();


    glPopMatrix();



	} //End of electric pole
				void epoll2(){
glMatrixMode(GL_MODELVIEW);
glPushMatrix();
/*Transalation*/
   glTranslatef(70.0f, 0.0f, 0.0f);

 // Yellow
     glColor3ub(91, 133, 87);
    glLineWidth(15);

	glBegin(GL_LINES);
    glVertex2f(-30.0f, 62.5f);    // x, y
	glVertex2f(-30.0f, 120.5f);
	glEnd();


    glColor3ub(55, 59, 58);
//
    glLineWidth(11);

	glBegin(GL_LINES);
    glVertex2f(-24.0f, 118.0f);    // x, y
	glVertex2f(-34.0f, 120.0f);

	glEnd();


    glPopMatrix();



	} //End of electric pole


 void epoll3(){
glMatrixMode(GL_MODELVIEW);
glPushMatrix();
/*Transalation*/
   glTranslatef(113.0f, -45.0f, 0.0f);

 // Yellow
    glColor3ub(91, 133, 87);
    glLineWidth(15);

	glBegin(GL_LINES);
    glVertex2f(-30.0f, 62.5f);    // x, y
	glVertex2f(-30.0f, 120.5f);
	glEnd();


    glColor3ub(55, 60, 58);
//
    glLineWidth(11);

	glBegin(GL_LINES);
    glVertex2f(-24.0f, 118.0f);    // x, y
	glVertex2f(-34.0f, 120.0f);

	glEnd();


    glPopMatrix();



	} //End of electric pole



void eware(){
glMatrixMode(GL_MODELVIEW);
glPushMatrix();
/*Transalation*/
   //glTranslatef(70.0f, 0.0f, 0.0f);

 // Yellow
    glColor3ub(0, 2, 0);
    glLineWidth(3);

	glBegin(GL_LINES);
    glVertex2f(-87.0f, 121.5f);    // x, y
	glVertex2f(37.0f, 121.5f);
    glVertex2f(-87.0f, 117.0f);    // x, y
	glVertex2f(44.0f, 117.0f);
    glVertex2f(-87.0f, 119.0f);    // x, y
	glVertex2f(42.0f, 119.0f);
	glEnd();




    glPopMatrix();



	} //End of electric pole

	void eware1(){
glMatrixMode(GL_MODELVIEW);
glPushMatrix();
/*Transalation*/
   //glTranslatef(70.0f, 0.0f, 0.0f);

 // Yellow
    glColor3ub(0, 2, 0);
    glLineWidth(3);

	glBegin(GL_LINES);
    glVertex2f(37.5f, 119.0f);    // x, y
	glVertex2f(95.0f, 60.0f);
    glVertex2f(39.5f, 119.0f);    // x, y
	glVertex2f(97.0f, 60.0f);
    glVertex2f(41.5f, 120.0f);    // x, y
	glVertex2f(101.0f, 60.0f);
	glEnd();


//    glColor3ub(55, 59, 58);
////
//    glLineWidth(11);
//
//	glBegin(GL_LINES);
//    glVertex2f(-24.0f, 118.0f);    // x, y
//	glVertex2f(-34.0f, 120.0f);
//
//	glEnd();


    glPopMatrix();



	}



	void ewareN(){
glMatrixMode(GL_MODELVIEW);
glPushMatrix();
/*Transalation*/
   //glTranslatef(70.0f, 0.0f, 0.0f);

 // Yellow
    glColor3ub(229, 228, 226);
    glLineWidth(3);

	glBegin(GL_LINES);
    glVertex2f(-87.0f, 121.5f);    // x, y
	glVertex2f(37.0f, 121.5f);
    glVertex2f(-87.0f, 117.0f);    // x, y
	glVertex2f(44.0f, 117.0f);
    glVertex2f(-87.0f, 119.0f);    // x, y
	glVertex2f(42.0f, 119.0f);
	glEnd();




    glPopMatrix();



	} //End of electric pole

	void eware1N(){
glMatrixMode(GL_MODELVIEW);
glPushMatrix();
/*Transalation*/
   //glTranslatef(70.0f, 0.0f, 0.0f);

 // Yellow
    glColor3ub(229, 228, 226);
    glLineWidth(3);

	glBegin(GL_LINES);
    glVertex2f(37.5f, 119.0f);    // x, y
	glVertex2f(95.0f, 60.0f);
    glVertex2f(39.5f, 119.0f);    // x, y
	glVertex2f(97.0f, 60.0f);
    glVertex2f(41.5f, 120.0f);    // x, y
	glVertex2f(101.0f, 60.0f);
	glEnd();


    glPopMatrix();



	}




	void road(){

	glBegin(GL_POLYGON);            // These vertices form a closed polygon
	glColor3ub(64.0f, 64.0f, 65.0f);  // Yellow
	glVertex2f(-90.0f, 20.2f);
	glVertex2f(90.0f, 20.2f);
	glVertex2f(90.0f, 60.9f);
	glVertex2f(-90.0f, 60.9f);

	glEnd();


	glLineWidth(5.5);

	glBegin(GL_LINES);              // Each set of 4 vertices form a quad
	glColor3ub(255.0f, 255.0f, 255.0f); // Red
	glVertex2f(-90.0f, 60.3f);    // x, y
	glVertex2f(90.0f, 60.3f);    // x, y
    glVertex2f(-90.0f, 21.1f);    // x, y
	glVertex2f(90.0f, 21.1f);    // x, y

    glEnd();


    glLineWidth(3.5);

	glBegin(GL_LINES);
    glVertex2f(0.0f, 23.5f);    // x, y
	glVertex2f(8.0f, 23.5f);
    glVertex2f(0.0f, 26.5f);    // x, y
	glVertex2f(8.0f, 26.5f);
    glVertex2f(0.0f, 29.5f);    // x, y
	glVertex2f(8.0f, 29.5f);
    glVertex2f(0.0f, 32.5f);    // x, y
	glVertex2f(8.0f, 32.5f);
    glVertex2f(0.0f, 35.5f);    // x, y
	glVertex2f(8.0f, 35.5f);
    glVertex2f(0.0f, 38.5f);    // x, y
	glVertex2f(8.0f, 38.5f);
    glVertex2f(0.0f, 41.5f);    // x, y
	glVertex2f(8.0f, 41.5f);
    glVertex2f(0.0f, 44.5f);    // x, y
	glVertex2f(8.0f, 44.5f);
    glVertex2f(0.0f, 47.5f);    // x, y
	glVertex2f(8.0f, 47.5f);
    glVertex2f(0.0f, 50.5f);    // x, y
	glVertex2f(8.0f, 50.5f);
    glVertex2f(0.0f, 53.5f);    // x, y
	glVertex2f(8.0f, 53.5f);
    glVertex2f(0.0f, 56.5f);    // x, y
	glVertex2f(8.0f, 56.5f);
    glVertex2f(0.0f, 58.5f);    // x, y
	glVertex2f(8.0f, 58.5f);



	glEnd();

    glLineWidth(3.5);
    glColor3ub(255.0f, 255.0f, 255.0f); // Red
	glBegin(GL_LINES);


    glVertex2f(-90.0f, 40.5f);    // x, y
	glVertex2f(-80.0f, 40.5f);
    glVertex2f(-70.0f, 40.5f);    // x, y
	glVertex2f(-60.0f, 40.5f);
    glVertex2f(-50.0f, 40.5f);    // x, y
	glVertex2f(-40.0f, 40.5f);
    glVertex2f(-30.0f, 40.5f);    // x, y
	glVertex2f(-20.0f, 40.5f);
    glVertex2f(-10.0f, 40.5f);    // x, y
	glVertex2f(-0.0f, 40.5f);
    glVertex2f(10.0f, 40.5f);    // x, y
	glVertex2f(20.0f, 40.5f);
    glVertex2f(30.0f, 40.5f);    // x, y
	glVertex2f(40.0f, 40.5f);
    glVertex2f(50.0f, 40.5f);    // x, y
	glVertex2f(60.0f, 40.5f);
    glVertex2f(70.0f, 40.5f);    // x, y
	glVertex2f(80.0f, 40.5f);


	glEnd();

	} //End of Road



void river()
{
//glLoadIdentity();
glMatrixMode(GL_MODELVIEW);
glPushMatrix();
/*Transalation*/
glTranslatef(-1.0f, 95.0f, 0.0f);
/*Rotation*/
//glRotatef(90,0.0f, 0.0f, 1.0f);
/*Scaling*/
glScalef(120.0f, 120.0f,1.0f);
//glTranslatef(10.0f, 10.0f, 0.0f)



glBegin(GL_QUADS);
glColor3ub (30,144,255);
//between river and road
glVertex2f(-1.0f, -0.70f);
glVertex2f(-1.0f, -1.50f);
glVertex2f(1.0f, -1.50f);
glVertex2f(1.0f, -0.70f);
//river with sky blue color
glColor3ub (240,230,140);
glVertex2f(-1.0f, -0.70f);
glVertex2f(-1.0f, -0.65f);
glVertex2f(1.0f, -0.65f);
glVertex2f(1.0f, -0.70f);

glEnd();
glPopMatrix();
}

	//river
//	void river()
//{
//
//    glBegin(GL_QUADS);
//    glColor3ub(30,144,255);
//    glVertex2f(-90.0f,-30.0f);
//    glVertex2f(90.0f,-30.0f);
//    glVertex2f(90.0f,20.64f);
//    glVertex2f(-90.0f,20.64f);
//    glEnd();
//    //End of river
//}


void car()
{
//glLoadIdentity();
glMatrixMode(GL_MODELVIEW);
glPushMatrix();
/*Transalation*/
glTranslatef(_move, 83.0f, 0.0f);
/*Rotation*/
//glRotatef(90,0.0f, 0.0f, 1.0f);
/*Scaling*/
glScalef(90.0f, 90.0f,1.0f);
//glTranslatef(10.0f, 10.0f, 0.0f)

    glBegin(GL_POLYGON);
    glColor3ub(25,25,112);

    glVertex2f(-0.42f, -0.25f);
    glVertex2f(-0.38f, -0.26f);
    glVertex2f(-0.35f, -0.31f);
    glVertex2f(-0.61f, -0.31f);
    glVertex2f(-0.62f, -0.30f);
    glVertex2f(-0.62f, -0.25f);

    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(0,0,0);
    glVertex2f(-0.58f, -0.25f);
    glVertex2f(-0.55f, -0.19f);
    glVertex2f(-0.45f, -0.19f);
    glVertex2f(-0.42f, -0.25f);
    glVertex2f(-0.58f, -0.25f);
    glEnd();
    glLineWidth(1.0);
    glBegin(GL_LINES);
	glColor3f(0.0f, 0.0f, 1.0f);
	glVertex2f(-0.50f, -0.19f);
	glVertex2f(-0.50f, -0.25f);

	glEnd();
	glBegin(GL_LINES);
	glColor3f(0.0f, 0.0f, 1.0f);
	glVertex2f(-0.58f, -0.25f);
    glVertex2f(-0.55f, -0.19f);

	glEnd();

	glBegin(GL_LINES);
	glColor3f(0.0f, 0.0f, 1.0f);
	 glVertex2f(-0.55f, -0.19f);
    glVertex2f(-0.45f, -0.19f);
	glEnd();

	glBegin(GL_LINES);
	glColor3f(0.0f, 0.0f, 1.0f);
	 glVertex2f(-0.45f, -0.19f);
    glVertex2f(-0.42f, -0.25f);
	glEnd();

	glBegin(GL_LINES);
	glColor3f(0.0f, 0.0f, 1.0f);
	 glVertex2f(-0.42f, -0.25f);
    glVertex2f(-0.58f, -0.25f);
	glEnd();

	glLineWidth(5.0);
	glBegin(GL_LINES);
	glColor3ub(204,0,0);
	glVertex2f(-0.62f, -0.29f);
    glVertex2f(-0.62f, -0.26f);
	glEnd();

   glColor3ub(0,0,0);
    circleSolid(-0.55f,-0.31f, 0.03);   //2

   glColor3ub(0,0,0);
    circleSolid(-0.42f,-0.31f, 0.03);   //2

    glEnd();
    glPopMatrix();
    glutSwapBuffers();



}



void railTrack()
{
//glLoadIdentity();
glMatrixMode(GL_MODELVIEW);
glPushMatrix();
/*Transalation*/
glTranslatef(8.0f, 82.0f, 0.0f);
/*Rotation*/
//glRotatef(90,0.0f, 0.0f, 1.0f);
/*Scaling*/
glScalef(78.0f, 78.0f,1.0f);
//glTranslatef(10.0f, 10.0f, 0.0f)
{
for(float j=-90.0f; j<=90.0f; j+=0.05f)
{
glBegin(GL_LINES);
glColor3f(0.5f,0.0f,0.0f);
glVertex2f(j,-0.08);
glVertex2f(j,-0.16);
glEnd();
}
glBegin(GL_LINES);
glColor3f(0.5f,0.0f,0.0f);
glVertex2f(-90.0,-0.08);
glVertex2f(90.0,-0.08);
glEnd();
glBegin(GL_LINES);
glColor3f(0.5f,0.0f,0.0f);
glVertex2f(-90.0,-0.16);
glVertex2f(90.0,-0.16);
glEnd();
glPopMatrix();
}
}







void rail()
{
//glLoadIdentity();
glMatrixMode(GL_MODELVIEW);
glPushMatrix();
/*Transalation*/
glTranslatef(_move3, 85.5f, 0.0f);
/*Rotation*/
//glRotatef(90,0.0f, 0.0f, 1.0f);
/*Scaling*/
glScalef(105.0f, 105.0f,1.0f);
// glTranslatef(railPosition, 0.0f, 0.0f);



glColor3f(0.5f,0.0f,0.8f);
glBegin(GL_QUADS);
glVertex2f(0.50, -0.13);
glVertex2f(0.65, -0.13);
glVertex2f(0.65, -0.04);
glVertex2f(0.50, -0.04);
glEnd();




glBegin(GL_QUADS);
glColor3f(0.0f,0.0f,0.0f);
glVertex2f(0.51, -0.10);
glVertex2f(0.54, -0.10);
glVertex2f(0.54, -0.06);
glVertex2f(0.51, -0.06);
glEnd();



glBegin(GL_QUADS);
glColor3f(0.0f,0.0f,0.0f);
glVertex2f(0.56, -0.10);
glVertex2f(0.59, -0.10);
glVertex2f(0.59, -0.06);
glVertex2f(0.56, -0.06);
glEnd();



glBegin(GL_QUADS);
glColor3f(0.0f,0.0f,0.0f);
glVertex2f(0.61, -0.10);
glVertex2f(0.64, -0.10);
glVertex2f(0.64, -0.06);
glVertex2f(0.61, -0.06);
glEnd();



glBegin(GL_QUADS);
glColor3f(0.0f,0.0f,0.0f);
glVertex2f(0.65, -0.13);
glVertex2f(0.66, -0.13);
glVertex2f(0.66, -0.10);
glVertex2f(0.65, -0.10);
glEnd();



glBegin(GL_QUADS);
glColor3f(0.0f,1.0f,1.0f);
glVertex2f(0.66, -0.13);
glVertex2f(0.81, -0.13);
glVertex2f(0.81, -0.04);
glVertex2f(0.66, -0.04);
glEnd();



glBegin(GL_QUADS);
glColor3f(0.0f,0.0f,0.0f);
glVertex2f(0.67, -0.10);
glVertex2f(0.70, -0.10);
glVertex2f(0.70, -0.06);
glVertex2f(0.67, -0.06);
glEnd();



glBegin(GL_QUADS);
glColor3f(0.0f,0.0f,0.0f);
glVertex2f(0.72, -0.10);
glVertex2f(0.75, -0.10);
glVertex2f(0.75, -0.06);
glVertex2f(0.72, -0.06);
glEnd();



glBegin(GL_QUADS);
glColor3f(0.0f,0.0f,0.0f);
glVertex2f(0.77, -0.10);
glVertex2f(0.80, -0.10);
glVertex2f(0.80, -0.06);
glVertex2f(0.77, -0.06);
glEnd();



glBegin(GL_QUADS);
glColor3f(0.0f,0.0f,0.0f);
glVertex2f(0.81, -0.13);
glVertex2f(0.82, -0.13);
glVertex2f(0.82, -0.10);
glVertex2f(0.81, -0.10);
glEnd();



glBegin(GL_QUADS);
glColor3f(0.0f,1.0f,0.0f);
glVertex2f(0.82, -0.13);
glVertex2f(0.97, -0.13);
glVertex2f(0.97, -0.04);
glVertex2f(0.82, -0.04);
glEnd();



glBegin(GL_QUADS);
glColor3f(0.0f,0.0f,0.0f);
glVertex2f(0.83, -0.10);
glVertex2f(0.86, -0.10);
glVertex2f(0.86, -0.06);
glVertex2f(0.83, -0.06);
glEnd();



glBegin(GL_QUADS);
glColor3f(0.0f,0.0f,0.0f);
glVertex2f(0.88, -0.10);
glVertex2f(0.91, -0.10);
glVertex2f(0.91, -0.06);
glVertex2f(0.88, -0.06);
glEnd();



glBegin(GL_QUADS);
glColor3f(0.0f,0.0f,0.0f);
glVertex2f(0.93, -0.10);
glVertex2f(0.96, -0.10);
glVertex2f(0.96, -0.06);
glVertex2f(0.93, -0.06);
glEnd();



glColor3ub(12, 5, 237);
circleSolid(0.94,-0.14,0.02);
circleSolid(0.85,-0.14,0.02);
circleSolid(0.78,-0.14,0.02);
circleSolid(0.69,-0.14,0.02);
circleSolid(0.62,-0.14,0.02);

glColor3ub(12, 5, 237);
circleSolid(0.53,-0.14,0.02);



glPopMatrix();

}



void boat()
{

glMatrixMode(GL_MODELVIEW);
glPushMatrix();
/*Transalation*/
glTranslatef(_move4, 90.5f, 0.0f);
/*Rotation*/
//glRotatef(90,0.0f, 0.0f, 1.0f);
/*Scaling*/
glScalef(105.0f, 105.0f,1.0f);

glBegin(GL_QUADS);
glColor3f(1.0f, .0f, 0.0f);

glVertex3f(-0.03f, -0.92f,0.0f);
glVertex3f(0.03f,-0.92f,0.0f);
glVertex3f(0.13f, -0.85f,0.0f);
glVertex3f(-0.13f,-0.85f,0.0f);


glColor3f(0.0f, 1.0f, 0.0f);
glVertex3f(0.10f, -0.85f,0.0f);
glVertex3f(-0.10f,-0.85f,0.0f);;
glVertex3f(-0.10f, -0.83f,0.0f);
glVertex3f(0.10f, -0.83f,0.0f);



glColor3f(0.0f, 0.0f, 1.0f);
glVertex3f(0.07f, -0.83f,0.0f);
glVertex3f(-0.07f,-0.83f,0.0f);;
glVertex3f(-0.07f, -0.81f,0.0f);
glVertex3f(0.07f, -0.81f,0.0f);



glColor3f(1.0f, 1.0f, 1.0f);
glVertex3f(-0.05f, -0.81f,0.0f);
glVertex3f(-0.04f,-0.81f,0.0f);;
glVertex3f(-0.04f, -0.79f,0.0f);
glVertex3f(-0.05f, -0.79f,0.0f);



glColor3f(1.0f, 1.0f, 1.0f);
glVertex3f(-0.01f, -0.81f,0.0f);
glVertex3f(0.0f,-0.81f,0.0f);
glVertex3f(0.0f, -0.79f,0.0f);
glVertex3f(-0.01f, -0.79f,0.0f);



glColor3f(1.0f, 1.0f, 1.0f);
glVertex3f(0.03f, -0.81f,0.0f);
glVertex3f(0.04f,-0.81f,0.0f);;
glVertex3f(0.04f, -0.79f,0.0f);
glVertex3f(0.03f, -0.79f,0.0f);


glEnd();
glPopMatrix();
glFlush();


}



void car2(){
//glLoadIdentity();
glMatrixMode(GL_MODELVIEW);
glPushMatrix();
/*Transalation*/
glTranslatef(_move1,105.0f, 0.0f);
/*Rotation*/
//glRotatef(90,0.0f, 0.0f, 1.0f);
/*Scaling*/
glScalef(78.0f, 78.0f,1.0f);
//glTranslatef(10.0f, 10.0f, 0.0f)
glBegin(GL_POLYGON);



glColor3ub(197, 86, 26);
glBegin(GL_POLYGON);
glVertex2f(0.0f,-0.94f);
glVertex2f(0.275f, -0.94f);
glVertex2f(0.275f,-0.859f);
glVertex2f(0.22f,-0.842f);
glVertex2f(0.18f,-0.758f);
glVertex2f(0.1f, -0.758f);
glVertex2f(0.08f,-0.842f);
glVertex2f(0.0f,-0.856f);
glEnd();
//wheels
glColor3ub(233,0,0);
circleSolid(0.07,-0.938,0.035);
circleSolid(0.2,-0.938,0.035);

glColor3ub(0,0,0);
circleSolid(0.07,-0.938,0.02);
glColor3ub(0,0,0);
circleSolid(0.2,-0.938,0.02);
//
glColor3ub(0,0,0);
glLineWidth(1.1);
glBegin(GL_LINES);
glVertex2f(0.141f,-0.758f);
glVertex2f(0.141f,-0.842f);
glEnd();
//window
glColor3ub(153,206,250);
glBegin(GL_POLYGON);
glVertex2f(0.071,-0.842);
glVertex2f(0.132,-0.842);
glColor3ub(100,149,237);
glVertex2f(0.132,-0.77);
glVertex2f(0.106,-0.77);
glEnd();
glColor3ub(153,206,250);
glBegin(GL_POLYGON);
glVertex2f(0.148,-0.842);
glVertex2f(0.206,-0.842);
glColor3ub(100,149,237);
glVertex2f(0.173,-0.77);
glVertex2f(0.148,-0.77);
glEnd();
//door
glColor3ub(0,0,0);
glLineWidth(5.0);
glBegin(GL_LINES);
glVertex2f(0.11,-0.863);
glVertex2f(0.13,-0.863);
glVertex2f(0.186,-0.863);
glVertex2f(0.206,-0.863);
glColor3ub(255,255,255);
glEnd();


glPopMatrix();


}

void truck()//This is the truck
{




glPushMatrix();
//glTranslatef(truckPosition,0.0f, 0.0f);
//body
//glLoadIdentity();
glMatrixMode(GL_MODELVIEW);
glPushMatrix();
/*Transalation*/
glTranslatef(_move2, 116.0f, 0.0f);
/*Rotation*/
//glRotatef(90,0.0f, 0.0f, 1.0f);
/*Scaling*/
glScalef(78.0f, 78.0f,1.0f);
//glTranslatef(10.0f, 10.0f, 0.0f)



glColor3ub(255,255,0);
glBegin(GL_POLYGON);
glVertex2f(-0.9f,-0.86f);
glVertex2f(-0.68f, -0.86f);
glVertex2f(-0.68f,-0.67f);
glVertex2f(-0.9f,-0.67f);
glEnd();

//base of the truck
glColor3ub(0,0,0);
glBegin(GL_POLYGON);
glVertex2f(-0.9f,-0.86f);
glVertex2f(-0.58f, -0.86f);
glVertex2f(-0.58f,-0.9f);
glVertex2f(-0.9f,-0.9f);
glEnd();

//front
glColor3ub(240,0,0);
glBegin(GL_POLYGON);
glVertex2f(-0.67f,-0.86f);
glVertex2f(-0.58f, -0.86f);
glVertex2f(-0.58f,-0.79f);
glVertex2f(-0.61f,-0.735f);
glVertex2f(-0.67f,-0.735f);
glEnd();

//wheels
glColor3ub(20,20,120);
circleSolid(-0.84f,-0.88f,0.034);
circleSolid(-0.64f,-0.88f,0.034);
glColor3ub(130,130,130);
circleSolid(-0.84f,-0.88f,0.02);
circleSolid(-0.64f,-0.88f,0.02);

//door
glColor3ub(0,0,0);
glLineWidth(5.0);
glBegin(GL_LINES);
glVertex2f(20.1,-8.1);
glVertex2f(20.1,-8/1);
glEnd();

//window
glColor3ub(153,206,250);
glBegin(GL_POLYGON);
glVertex2f(-0.66,-0.797);
glVertex2f(-0.596,-0.797);
glVertex2f(-0.596,-0.781);
glColor3ub(100,149,237);
glVertex2f(-0.615,-0.747);
glVertex2f(-0.66,-0.747);
glEnd();

glPopMatrix();
}
//end of truck




//start of rain


void Rain(int value){

if(rainday){

    rain -= 100.09f;

    glMatrixMode(GL_MODELVIEW);
glPushMatrix();

glTranslatef(-90.0f, -30.0f, 0.0f);

/*Scaling*/
//glScalef(150.0f, 180.0f,1.0f);

    glBegin(GL_POINTS);
    for(int i=1;i<=1200;i++)
    {
        int x=rand(),y=rand();
        x%=1200; y%=1000;
        glBegin(GL_LINES);
        glColor3f(1.0, 1.0, 1.0);
        glVertex2f(x,y);
        glVertex2f(x+5,y+9);
        glEnd();
    }

	//glutPostRedisplay();
	glutTimerFunc(10, Rain, 0);
	glPopMatrix();

    glFlush();

}
}



void display() {
glClearColor(0.0f, 0.0f, 0.0f, 1.0f); // Set background color to black and opaque
glClear(GL_COLOR_BUFFER_BIT); // Clear the color buffer (background)

sky();
sun();
clouds();
clouds1();

windmill();
winwheel();

windmill2();


winwheel2();
eware();
eware1();
house();
house2();
house3();
flag();

school();
cellphonetower();

tree();
epoll();
epoll2();
ground();
road();
car();
car2();



lambpost();
lambpost1();

railing();
railTrack();
rail();
traflight();

epoll3();
eware1();

river();
boat();





glFlush();

glutSwapBuffers();
}


void display1() {
glClearColor(0.0f, 0.0f, 0.0f, 1.0f); // Set background color to black and opaque
glClear(GL_COLOR_BUFFER_BIT); // Clear the color buffer (background)

skyN();
star();

ewareN();

house();
house2();
house3();
school();
windmill();
winwheel();
windmill2();
winwheel2();
cellphonetowerN();

tree();
epoll();
epoll2();
ground();
road();

car2();
truck();

lambpost();
lambpost1();


railing();
railTrack();
rail();
traflight();

epoll3();
eware1N();


river();
boat();





glFlush();

glutSwapBuffers();
}




//******************************************************************************************



void displayR() {
glClearColor(0.0f, 0.0f, 0.0f, 1.0f); // Set background color to black and opaque
glClear(GL_COLOR_BUFFER_BIT); // Clear the color buffer (background)

sky();
sun();
clouds();
cloudsR();
windmill();
winwheel();

windmill2();


winwheel2();
eware();
eware1();
house();
house2();
house3();
flag();
school();
cellphonetower();

tree();
epoll();
epoll2();
ground();
road();
car();
car2();


lambpost();
lambpost1();

railing();
railTrack();
rail();
traflight();
epoll3();
eware1();

river();
boat();





glFlush();

glutSwapBuffers();
}


void init()
{
glLoadIdentity();
 glMatrixMode(GL_MODELVIEW);
gluOrtho2D(-90,90,-30,150);
}
//1001
void updatecar(int value) {

 _move -=- 0.6;
if(_move>150.0f)
{
_move=-90.0f;
}
glutPostRedisplay(); //Notify GLUT that the display has changed

 glutTimerFunc(20, updatecar, 0); //Notify GLUT to call update again in 25 milliseconds
}
//1002
void updatecar1(int value) {

 _move1 -= 0.9;
if(_move1<-115.0f)
{
_move1=90.0f;
}
glutPostRedisplay(); //Notify GLUT that the display has changed

 glutTimerFunc(20, updatecar1, 0); //Notify GLUT to call update again in 25 milliseconds
}
//1003
void updatecar2(int value) {

 _move2 -= -0.9;
if(_move2>160.0f)
{
_move2=-90.0f;
}
glutPostRedisplay(); //Notify GLUT that the display has changed

 glutTimerFunc(20, updatecar2, 0); //Notify GLUT to call update again in 25 milliseconds
}
//1007
void updaterail(int value) {

 _move3 -= 0.2;
if(_move3<-190.0f)
{
_move3=90.0f;
}
glutPostRedisplay(); //Notify GLUT that the display has changed

 glutTimerFunc(20, updaterail, 0); //Notify GLUT to call update again in 25 milliseconds
}
//1010
void updateboat(int value) {

 _move4 -= 0.5;
if(_move4<-100.0f)
{
_move4=90.0f;
}
glutPostRedisplay(); //Notify GLUT that the display has changed

 glutTimerFunc(20, updateboat, 0); //Notify GLUT to call update again in 25 milliseconds
}
//1004
//move clouds
void updatecloud(int value) {

 _move5 -=- 0.3;
if(_move5>150.0f)
{
_move5=-90.0f;
}
glutPostRedisplay(); //Notify GLUT that the display has changed

 glutTimerFunc(20, updatecloud, 0); //Notify GLUT to call update again in 25 milliseconds
}
//1005
//move clouds
void updatecloud1(int value) {

  _move7 -= 0.3;
if(_move7<-140.0f)
{
_move7=110.0f;
}
glutPostRedisplay(); //Notify GLUT that the display has changed

 glutTimerFunc(20, updatecloud1, 0); //Notify GLUT to call update again in 25 milliseconds
}



//1006
void updatecloudR(int value) {

 _move6 -= 0.3;
if(_move6<-140.0f)
{
_move6=110.0f;
}
glutPostRedisplay(); //Notify GLUT that the display has changed

 glutTimerFunc(20, updatecloudR, 0); //Notify GLUT to call update again in 25 milliseconds
}
//1008
void updatesun(int value) {

    _angle+=0.03f;
    if(_angle > 80.0)
    {
        _angle-=90;
    }
	glutPostRedisplay(); //Notify GLUT that the display has changed

	glutTimerFunc(30, updatesun, 0); //Notify GLUT to call update again in 25 milliseconds
}
//1011
void updatewinwheell(int value){

    _angle1+=0.7f;
//    if(_angle1 > 360.0)
//    {
//        _angle1-=360;
//    }
	glutPostRedisplay(); //Notify GLUT that the display has changed

	glutTimerFunc(30,updatewinwheell, 0); //Notify GLUT to call update again in 25 milliseconds
}


//1009
void updatewinfan2(int value){

    _angle2+=0.7f;
//    if(_angle1 > 360.0)
//    {
//        _angle1-=360;
//    }
	glutPostRedisplay(); //Notify GLUT that the display has changed

	glutTimerFunc(30, updatewinfan2, 0); //Notify GLUT to call update again in 25 milliseconds
}

//1012
void updatesound(int value){


	glutPostRedisplay(); //Notify GLUT that the display has changed

	glutTimerFunc(30, updatewinfan2, 0); //Notify GLUT to call update again in 25 milliseconds
}


void handleKeypress(unsigned char key, int x, int y) {

 switch (key) {

case 'd':

 glClearColor(1.0,1.0,1.0,1.0);
 sndPlaySound("Day.wav",SND_ASYNC);
glutPostRedisplay();
glutDisplayFunc(display);
//day();
break;

case 'n':
glClearColor(0.0,0.0,0.0,1.0);
sndPlaySound("Night.wav",SND_ASYNC);
glutPostRedisplay();
glutDisplayFunc(display1);
break;







case 'r':
glClearColor(0.0,0.0,0.0,1.0);
        rainday = true;
        Rain(rain);
sndPlaySound("Rain.wav",SND_ASYNC);
glutPostRedisplay();
glutDisplayFunc(displayR);
//glutDisplayFunc(cloudN);
break;


case 's':
glClearColor(0.0,0.0,0.0,1.0);
        rainday = false;
        //Rain(rain);
//sndPlaySound("Rain.wav",SND_ASYNC);
glutPostRedisplay();
glutDisplayFunc(display);
break;

}

}




/* Main function: GLUT runs as a console application starting at main()  */
int main(int argc, char** argv) {

     cout<<"COMPUTER GRAPHICS"<<endl;
     cout<< "AMERICAN INTERNATIONAL UNIVERSITY-BANGLADESH"<<endl;
     cout<<"--------------------"<<endl;
     cout<<"Project Title: Modern City View"<<endl;
     cout<<"Presented by"<<endl<<endl;
     cout<<"--------------------"<<endl;

     cout<< "ROY MRIDUL KUMAR "<<endl<<emdl<<endl;



     cout<< " INSTRUCTIONS :  "<<endl;
     cout<<"--------------------"<<endl<<endl;
     cout<< " Press  'n' for Night View "<<endl;
     cout<< " Press  'r' for Rainy View "<<endl;
     cout<< " Press  's' for Exit RainyDay View "<<endl;
     cout<< " Press  'd' for Day View "<<endl;

     cout<< " Press  'ESC' to Exit The project "<<endl;

	glutInit(&argc, argv);                 // Initialize GLUT
	glutCreateWindow("Smart City View"); // Create a window with the given title
	glutInitWindowSize(3020, 3020);

	init();
	glutDisplayFunc(display); // Register display callback handler for window re-paint
    glutTimerFunc(20, updatecar, 0); //Add a timer
    glutTimerFunc(20, updatecar1, 0); //Add a timer
    glutTimerFunc(20, updatecar2, 0); //Add a timer
    glutTimerFunc(20, updaterail, 0); //Add a timer
    glutTimerFunc(20, updateboat, 0); //Add a timer
    glutTimerFunc(20, updatecloud, 0); //Add a timer
    glutTimerFunc(20, updatecloud1, 0); //Add a timer
    glutTimerFunc(20, updatecloudR, 0); //Add a timer
    glutTimerFunc(20, updatesun, 0); //Add a timer
    glutTimerFunc(20, updatewinwheell, 0); //Add a timer
    glutTimerFunc(20, updatewinfan2, 0); //Add a timer




    //glutSpecialFunc(SpecialInput);
    glutKeyboardFunc(handleKeypress);

	glutMainLoop();           // Enter the event-processing loop
	return 0;
}
